---
#####################################################################################################
#                                                                                                   #
# Usage:                                                                                            #
#                                                                                                   #
# ansible-playbook main.yml -e "deployment_env=aia"                                                #
# ansible-playbook main.yml -e "deployment_env=non-prod"                                            #
# ansible-playbook main.yml -e "deployment_env=prod"                                                #
#                                                                                                   #
# ansible-playbook main.yml -e "deployment_env=aia nocyberark=1"                                   #
# ansible-playbook main.yml -e "deployment_env=non-prod nocyberark=1"                               #
# ansible-playbook main.yml -e "deployment_env=prod nocyberark=1"                                   #
#                                                                                                   #
# other options:                                                                                    #
#                                                                                                   #
# ansible-playbook main.yml -e "deployment_env=non-prod nocyberark=1 nodataload=1"                  #
# ansible-playbook main.yml -e "deployment_env=prod nocyberark=1 nodataload=1"                      #
# ansible-playbook main.yml -e "deployment_env=aia nocyberark=1 nodataload=1"                      #
# ansible-playbook main.yml -e "deployment_env=aia nocyberark=1"                                   #
#                                                                                                   #
#####################################################################################################

- hosts: localhost
  remote_user: root

  vars:
    # this will be usually specified in command line params
    - deployment_env: aia      # must be overwritten with an inline variable. eg: ... -e "deployment_env=non-prod"

  tasks:
    - include_vars: "./environments/{{ deployment_env }}/main.yml"               # global variables
    - include_vars: "./environments/common_vars.yaml"                            # common vars same in all environments

    - block:
#######################################################################################################


      #####################################################
      # deploy the vpc and our security group

      # execute roles in a loop from a list
      - name: execute curent project specific roles in a loop
        include_role:
          name: "{{role_item}}"
        loop:
          - ws-00-vpc-create            # executed only if execute_vpc_create is defined
          - ws-00-vpc-sg                # executed only if execute_vpc_sg is defined
        loop_control:
          loop_var: role_item


      #####################################################
      # process project artifacts

      - name: prepare project artifacts
        include_role:
          name: ws-00-build-artifacts


      ######################################################
      # create artifacts bucket and upload local build

      # # this should be moved to retract
      # - name: delete artifacts bucket and all contents
      #   amazon.aws.aws_s3:
      #     bucket: "{{ bucket_artifacts }}"
      #     mode: delete

      # - name: create artifacts s3 bucket v1
      #   amazon.aws.s3_bucket:
      #     name: "{{ bucket_artifacts }}"
      #     state: present
      #     encryption: "AES256"


      # reference: https://docs.ansible.com/ansible/latest/collections/amazon/aws/aws_s3_module.html
      - name: create artifacts s3 bucket v2
        amazon.aws.aws_s3:
          bucket: "{{ bucket_artifacts }}"
          mode: create
          encryption_mode: AES256
          permission: private

      # this is as an example of shell command, instedad  should use amazon.aws.s3 module
      - name: sync files using aws cli
        shell: "aws s3 sync '{{ path_to_build }}/artifacts' 's3://{{ bucket_artifacts }}/{{ application_name }}/artifacts'"
        register: shell_response

      # display the output of the shell command
      - debug:
          msg: "{{ shell_response }}"


      # TODO: data bucket should be segregated in two
      - name: delete data bucket
        amazon.aws.aws_s3:
          bucket: "{{ bucket_data }}"
          mode: delete


      ######################################################
      # deploy master cft
      # reference: https://github.com/ansible-collections/amazon.aws/blob/main/docs/amazon.aws.cloudformation_module.rst
      - name: deploy solution cloudformation
        amazon.aws.cloudformation:
          stack_name: "{{ business_unit }}-{{ application_name }}-main-solution-stack"
          state: present
          region: "{{ aws_region }}"
          disable_rollback: true
          template: "{{ path_to_build }}/artifacts/cloudformation/md-labs-hudi-demo-stack.yaml"
          template_parameters:
            VPC: "{{ vpc_info.VPC }}"
            Subnet1: "{{ vpc_info.SubnetAPublic }}"
            Subnet2: "{{ vpc_info.SubnetBPublic }}"
            CIDRBlock: "{{ sg_cidr }}"



#######################################################################################################
      always:
#######################################################################################################
        - name: clean up
          include_role:
            name: ws----cleanup-aws      # not executed if nocyberark is defined
#######################################################################################################